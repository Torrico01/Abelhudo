// Generated by gencpp from file abelhudo_pkg/Motor_msg.msg
// DO NOT EDIT!


#ifndef ABELHUDO_PKG_MESSAGE_MOTOR_MSG_H
#define ABELHUDO_PKG_MESSAGE_MOTOR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abelhudo_pkg
{
template <class ContainerAllocator>
struct Motor_msg_
{
  typedef Motor_msg_<ContainerAllocator> Type;

  Motor_msg_()
    : pwm(0)
    , dir(0)
    , motor(0)  {
    }
  Motor_msg_(const ContainerAllocator& _alloc)
    : pwm(0)
    , dir(0)
    , motor(0)  {
  (void)_alloc;
    }



   typedef uint16_t _pwm_type;
  _pwm_type pwm;

   typedef int16_t _dir_type;
  _dir_type dir;

   typedef uint16_t _motor_type;
  _motor_type motor;





  typedef boost::shared_ptr< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Motor_msg_

typedef ::abelhudo_pkg::Motor_msg_<std::allocator<void> > Motor_msg;

typedef boost::shared_ptr< ::abelhudo_pkg::Motor_msg > Motor_msgPtr;
typedef boost::shared_ptr< ::abelhudo_pkg::Motor_msg const> Motor_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abelhudo_pkg::Motor_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abelhudo_pkg::Motor_msg_<ContainerAllocator1> & lhs, const ::abelhudo_pkg::Motor_msg_<ContainerAllocator2> & rhs)
{
  return lhs.pwm == rhs.pwm &&
    lhs.dir == rhs.dir &&
    lhs.motor == rhs.motor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abelhudo_pkg::Motor_msg_<ContainerAllocator1> & lhs, const ::abelhudo_pkg::Motor_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abelhudo_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2b198c4bf4a0862124ad2db607e83d5";
  }

  static const char* value(const ::abelhudo_pkg::Motor_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2b198c4bf4a0862ULL;
  static const uint64_t static_value2 = 0x124ad2db607e83d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abelhudo_pkg/Motor_msg";
  }

  static const char* value(const ::abelhudo_pkg::Motor_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 pwm\n"
"int16 dir\n"
"uint16 motor\n"
;
  }

  static const char* value(const ::abelhudo_pkg::Motor_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pwm);
      stream.next(m.dir);
      stream.next(m.motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Motor_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abelhudo_pkg::Motor_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abelhudo_pkg::Motor_msg_<ContainerAllocator>& v)
  {
    s << indent << "pwm: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm);
    s << indent << "dir: ";
    Printer<int16_t>::stream(s, indent + "  ", v.dir);
    s << indent << "motor: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABELHUDO_PKG_MESSAGE_MOTOR_MSG_H
